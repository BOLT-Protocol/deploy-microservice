---
- hosts: server
  roles:
    - { role: init-env, become: yes }
  tasks:
    - name: pull repo
      ignore_errors: true
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.name }}"
        accept_hostkey: yes
        version: prerelease-v0.1.0
      with_items:
        - { repo: git@github.com:VagrantPi/privateChain.git, name: privateChain }
        - { repo: git@github.com:BOLT-Protocol/gringotts.git, name: gringotts }
        - { repo: git@github.com:BOLT-Protocol/contracts.git, name: contracts }
        - { repo: git@github.com:BOLT-Protocol/BOLT-KEYSTONE.git, name: BOLT-KEYSTONE }
        - { repo: git@github.com:BOLT-Protocol/BOLT-KEYCHAIN.git, name: BOLT-KEYCHAIN }
        - { repo: git@github.com:BOLT-Protocol/BOLT-TRUST.git, name: BOLT-TRUST }
        - { repo: git@github.com:BOLT-Protocol/BOLT-CURRENCY.git, name: BOLT-CURRENCY }
        - { repo: git@github.com:BOLT-Protocol/HowinvestMockAPI.git, name: HowinvestMockAPI }
        - { repo: git@github.com:BOLT-Protocol/HowInvest-ReceptionDesk.git, name: HowInvest-ReceptionDesk }

- hosts: server
  name: set chain
  sudo: yes
  tasks:
    - name: add ethereum repo
      apt_repository:
        repo: ppa:ethereum/ethereum
    - name: install ethereum
      apt:
        name: "{{ packages }}"
  vars:
    - packages:
      - software-properties-common
      - ethereum

- hosts: server
  name: start chain
  tasks:
    - name: reset config
      shell:
        sed -i "s#/home/vagrant#{{ home_path }}#g" privateChain/reset.sh;
        sed -i "s#/home/vagrant#{{ home_path }}#g" privateChain/start.sh;
      ignore_errors: true
    - name: reset privateChain
      command: sh reset.sh
      args:
        chdir: privateChain/
    - name: start privateChain
      shell: "(cd privateChain/; nohup sh start.sh >/dev/null 2>&1 &)"
  vars:
    - home_path: /home/vagrant

- hosts: server
  name: init DB
  become: True
  tasks:
    - name: Install PostgreSQL
      apt: name={{ item }} update_cache=yes state=installed
      with_items:
        - postgresql
        - python-psycopg2
        - postgresql-contrib
        - libpq-dev
    - name: Create database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{ item }}"
      with_items:
        - bolt
        - trust
    - name: Create database user
      become: yes
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      postgresql_user:
        db: "{{ item }}"
        name: howhow
        password: DRFnNN67
      with_items:
        - bolt
        - trust

- hosts: server
  name: start all service
  roles:
    - { role: geerlingguy.nodejs, become: yes }
  tasks:
    - name: Check if node already installed
      command: node --version
      ignore_errors: true
      changed_when: false
      register: node_is_installed
    - name: install nvm
      shell: >
        curl https://raw.githubusercontent.com/creationix/nvm/v0.7.0/install.sh | sh
        creates=.nvm/nvm.sh
      when: node_is_installed.rc != 0
    - name: install node and set version
      shell: >
        /bin/bash -c "source ~/.nvm/nvm.sh && nvm install v8.9.4 && nvm alias default v8.9.4"
        creates=.nvm/alias
      when: node_is_installed.rc != 0
    - name: Install packages based on package.json.
      npm:
        path: "{{ item }}"
      with_items:
        - "contracts"
        - "gringotts"
        - "BOLT-KEYSTONE"
        - "BOLT-KEYCHAIN"
        - "BOLT-TRUST"
        - "BOLT-CURRENCY"
        - "HowinvestMockAPI"
        - "HowInvest-ReceptionDesk"
    - name: cp env file & deploy script
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: ./script/deployContract.sh, dest: "contracts/deployContract.sh" } 
        - { src: ./env/contracts/env.js, dest: "contracts/env.js" } 
        - { src: ./env/gringotts/env.js, dest: "gringotts/env.js" } 
        - { src: ./env/BOLT-CURRENCY/env.js, dest: "BOLT-CURRENCY/env.js" } 
        - { src: ./env/BOLT-KEYCHAIN/env.js, dest: "BOLT-KEYCHAIN/env.js" } 
        - { src: ./env/BOLT-KEYSTONE/env, dest: "BOLT-KEYSTONE/env" } 
        - { src: ./env/BOLT-TRUST/env.js, dest: "BOLT-TRUST/env.js" } 
        - { src: ./env/HowinvestMockAPI/private, dest: "HowinvestMockAPI" } 
        - { src: ./env/HowInvest-ReceptionDesk/private, dest: "HowInvest-ReceptionDesk" } 
    - name: truffle deploy
      command: sh deployContract.sh
      args:
        chdir: "contracts"
    - name: start gringotts
      shell: rm -rf ./chaindata/level ./chaindata/rocksdb ./db; /usr/local/lib/npm/bin/pm2 start server.js -n gringotts
      ignore_errors: true
      args:
        chdir: "gringotts"
    - name: migrate gringotts
      shell: NODE_ENV=production ./node_modules/.bin/sequelize db:migrate --config env.js --migrations-path ./storage-manager/migrations --models-path ./storage-manager/models
      ignore_errors: true
      args:
        chdir: "gringotts"
    - name: start migrate
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-CURRENCY
      ignore_errors: true
      args:
        chdir: "BOLT-CURRENCY"
    - name: start BOLT-KEYCHAIN
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-KEYCHAIN
      ignore_errors: true
      args:
        chdir: "BOLT-KEYCHAIN"
    - name: start BOLT-KEYSTONE
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-KEYSTONE
      ignore_errors: true
      args:
        chdir: "BOLT-KEYSTONE"
    - name: migrate BOLT-TRUST
      shell: NODE_ENV=development ./node_modules/.bin/sequelize db:migrate --config env.js --migrations-path ./src/database/migrations --models-path ./src/database/models
      ignore_errors: true
      args:
        chdir: "BOLT-TRUST"
    - name: start BOLT-TRUST
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-TRUST
      ignore_errors: true
      args:
        chdir: "BOLT-TRUST"
    - name: call keystone to register HowinvestMockAPI
      uri:
        url: http://127.0.0.1:5999/register
        method: POST
        body: {"userID": "HowinvestMockAPI@email.com", "password": "123456", "profile": { "name": "TEST", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: registerData
    - name: set config
      shell: 
        sed -i "s#apiKey = .*#apiKey = \"{{ registerData.json.profile.apiKey }}\"#g" HowinvestMockAPI/private/config.toml;
        sed -i "s#apiSecret = .*#apiSecret = \"{{ registerData.json.profile.apiSecret }}\"#g" HowinvestMockAPI/private/config.toml
      ignore_errors: true
    - name: call keystone to register OPAccount
      uri:
        url: http://127.0.0.1:5999/register
        method: POST
        body: {"userID": "OP@email.com", "password": "123456", "profile": { "name": "TEST", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: registerData
    - name: set config
      shell: 
        sed -i "s#opAccountAddress = .*#opAccountAddress = \"{{ registerData.json.profile.address }}\"#g" HowinvestMockAPI/private/config.toml;
        sed -i "s#opAccountApiKey = .*#opAccountApiKey = \"{{ registerData.json.profile.apiKey }}\"#g" HowinvestMockAPI/private/config.toml;
        sed -i "s#opAccountApiSecret = .*#opAccountApiSecret = \"{{ registerData.json.profile.apiSecret }}\"#g" HowinvestMockAPI/private/config.toml
        sed -i "s#opAccountAddress = .*#opAccountAddress = \"{{ registerData.json.profile.address }}\"#g" HowInvest-ReceptionDesk/private/config.toml;
        sed -i "s#opAccountApiKey = .*#opAccountApiKey = \"{{ registerData.json.profile.apiKey }}\"#g" HowInvest-ReceptionDesk/private/config.toml;
        sed -i "s#opAccountApiSecret = .*#opAccountApiSecret = \"{{ registerData.json.profile.apiSecret }}\"#g" HowInvest-ReceptionDesk/private/config.toml
      ignore_errors: true
    - name: set cap can net bind service
      command: setcap cap_net_bind_service=+ep /usr/bin/node
      become: yes
    - name: start HowinvestMockAPI
      command: /usr/local/lib/npm/bin/pm2 start . -n HowinvestMockAPI
      ignore_errors: true
      args:
        chdir: "HowinvestMockAPI"
    - name: start HowInvest-ReceptionDesk
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-ReceptionDesk
      ignore_errors: true
      args:
        chdir: "HowInvest-ReceptionDesk"
  environment:
    - LC_CTYPE: en_US.UTF-8
    - LC_ALL: en_US.UTF-8
