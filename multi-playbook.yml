---
- hosts: multi
  sudo: yes
  vars_files: vars/all.yml
  roles:
    - { role: init-env, user: "{{ agent_user }}" }
    - { role: geerlingguy.nodejs, nodejs_install_npm_user: "{{ agent_user }}" }
  tasks:
    - name: Check if node already installed
      command: node --version
      ignore_errors: true
      changed_when: false
      register: node_is_installed
    - name: install nvm
      shell: >
        curl https://raw.githubusercontent.com/creationix/nvm/v0.7.0/install.sh | sh
        creates=.nvm/nvm.sh
      when: node_is_installed.rc != 0
    - name: install node and set version
      shell: >
        /bin/bash -c "source ~/.nvm/nvm.sh && nvm install v8.9.4 && nvm alias default v8.9.4"
        creates=.nvm/alias
      when: node_is_installed.rc != 0

- hosts: bolt_main
  name: clone project
  tasks:
    - name: pull repo
      ignore_errors: true
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.name }}"
        accept_hostkey: yes
        version: develop
      with_items:
        - { repo: git@github.com:BOLT-Protocol/Howinvest-APIGateway.git, name: Howinvest-APIGateway }
        - { repo: git@github.com:BOLT-Protocol/BOLT-AUTOMATION.git, name: BOLT-AUTOMATION }

- hosts: bolt_microservice
  name: clone project
  tasks:
    - name: pull repo
      ignore_errors: true
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.name }}"
        accept_hostkey: yes
        version: develop
      with_items:
        - { repo: git@github.com:VagrantPi/privateChain.git, name: privateChain }
        - { repo: git@github.com:BOLT-Protocol/gringotts.git, name: gringotts }
        - { repo: git@github.com:BOLT-Protocol/contracts.git, name: contracts }
    - name: pull repo
      ignore_errors: true
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.name }}"
        accept_hostkey: yes
        version: develop
      with_items:
        - { repo: git@github.com:BOLT-Protocol/BOLT-KEYSTONE.git, name: BOLT-KEYSTONE }
        - { repo: git@github.com:BOLT-Protocol/BOLT-KEYCHAIN.git, name: BOLT-KEYCHAIN }
        - { repo: git@github.com:BOLT-Protocol/BOLT-TRUST.git, name: BOLT-TRUST }
        - { repo: git@github.com:BOLT-Protocol/BOLT-CURRENCY.git, name: BOLT-CURRENCY }

- hosts: howinvest_microservice
  name: clone project
  tasks:
    - name: pull repo
      ignore_errors: true
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.name }}"
        accept_hostkey: yes
        version: develop
      with_items:
        - { repo: git@github.com:BOLT-Protocol/HowInvest-AuthModule.git, name: HowInvest-AuthModule }
        - { repo: git@github.com:BOLT-Protocol/HowInvest-TradeModule.git, name: HowInvest-TradeModule }
        - { repo: git@github.com:BOLT-Protocol/HowInvest-Blacklist.git, name: HowInvest-Blacklist }

- hosts: bolt_microservice
  name: set chain
  sudo: yes
  tasks:
    - name: add ethereum repo
      apt_repository:
        repo: ppa:ethereum/ethereum
    - name: install ethereum
      apt:
        name: "{{ packages }}"
  vars:
    - packages:
      - software-properties-common
      - ethereum

- hosts: bolt_microservice
  name: start chain
  vars_files: vars/all.yml
  tasks:
    - name: reset config
      shell:
        sed -i "s#/home/vagrant#{{ home_path }}#g" privateChain/reset.sh;
        sed -i "s#/home/vagrant#{{ home_path }}#g" privateChain/start.sh;
      ignore_errors: true
    - name: reset privateChain
      command: sh reset.sh
      args:
        chdir: privateChain/
    - name: start privateChain
      shell: "(cd privateChain/; nohup sh start.sh >/dev/null 2>&1 &)"
  vars:
    - home_path: "/home/{{ agent_user }}"

- hosts: bolt_microservice
  name: init DB
  vars_files: vars/all.yml
  sudo: True
  tasks:
    - name: Install PostgreSQL
      apt: 
        name: ['aptitude', 'postgresql', 'python-psycopg2', 'postgresql-contrib', 'libpq-dev', 'python-pkg-resources', 'python-pip', 'python3-pip']
        update_cache: yes
        state: present
    - name: pip install psycopg2
      ignore_errors: true
      pip:
        name: ['psycopg2']
    - name: Create database
      become_user: postgres
      postgresql_db:
        name: "{{ item }}"
      with_items:
        - bolt
        - trust
    - name: Create database user
      become: yes
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      postgresql_user:
        db: "{{ item }}"
        name: "{{ postgresUser }}"
        password: "{{ postgresPassword }}"
      with_items:
        - bolt
        - trust

- hosts: bolt_microservice
  name: start all bolt_microservice
  tasks:
    - name: Install packages based on package.json.
      npm:
        path: "{{ item }}"
      with_items:
        - "contracts"
        - "gringotts"
        - "BOLT-KEYSTONE"
        - "BOLT-KEYCHAIN"
        - "BOLT-TRUST"
        - "BOLT-CURRENCY"
    - name: cp env file & deploy script
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: ./script/deployContract.sh, dest: "contracts/deployContract.sh" } 
        - { src: ./env/contracts/env.js, dest: "contracts/env.js" } 
        - { src: ./env/gringotts/env.js, dest: "gringotts/env.js" } 
        - { src: ./env/BOLT-CURRENCY/env.js, dest: "BOLT-CURRENCY/env.js" } 
        - { src: ./env/BOLT-KEYCHAIN/env.js, dest: "BOLT-KEYCHAIN/env.js" } 
        - { src: ./env/BOLT-KEYSTONE/env, dest: "BOLT-KEYSTONE/env" } 
        - { src: ./env/BOLT-TRUST/env.js, dest: "BOLT-TRUST/env.js" }
    - name: truffle deploy
      command: sh deployContract.sh
      args:
        chdir: "contracts"
    - name: migrate gringotts
      shell: NODE_ENV=production ./node_modules/.bin/sequelize db:migrate --config env.js --migrations-path ./storage-manager/migrations --models-path ./storage-manager/models
      ignore_errors: true
      args:
        chdir: "gringotts"
    - name: start gringotts
      shell: rm -rf ./chaindata/level ./chaindata/rocksdb ./db; /usr/local/lib/npm/bin/pm2 start server.js -n gringotts
      ignore_errors: true
      args:
        chdir: "gringotts"
    - name: start migrate
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-CURRENCY
      ignore_errors: true
      args:
        chdir: "BOLT-CURRENCY"
    - name: start BOLT-KEYCHAIN
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-KEYCHAIN
      ignore_errors: true
      args:
        chdir: "BOLT-KEYCHAIN"
    - name: start BOLT-KEYSTONE
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-KEYSTONE
      ignore_errors: true
      args:
        chdir: "BOLT-KEYSTONE"
    - name: migrate BOLT-TRUST
      shell: NODE_ENV=development ./node_modules/.bin/sequelize db:migrate --config env.js --migrations-path ./src/database/migrations --models-path ./src/database/models
      ignore_errors: true
      args:
        chdir: "BOLT-TRUST"
    - name: start BOLT-TRUST
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-TRUST
      ignore_errors: true
      args:
        chdir: "BOLT-TRUST"
  environment:
    - LC_CTYPE: en_US.UTF-8
    - LC_ALL: en_US.UTF-8

- hosts: bolt_microservice
  name: register all service user
  vars_files: vars/all.yml
  tasks:
    - name: call keystone to register authModule
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "authModule", "password": "{{ authModulePassword }}", "profile": { "name": "authModule", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
    - name: call keystone to register opAccount
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "opAccount", "password": "{{ opAccountPassword }}", "profile": { "name": "opAccount", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
    - name: call keystone to register receptionDesk
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "receptionDesk", "password": "{{ receptionDeskPassword }}", "profile": { "name": "receptionDesk", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: registerReceptionDesk
    - name: call keystone to register fundManagement
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "fundManagement", "password": "{{ fundManagementPassword }}", "profile": { "name": "fundManagement", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: registerFundManagement

- hosts: bolt_main
  name: set microservice env and start service
  vars_files: vars/all.yml
  tasks:
    - name: Install packages based on package.json.
      npm:
        path: "{{ item }}"
      with_items:
        - "Howinvest-APIGateway"
        - "BOLT-AUTOMATION"
    - name: cp env file & deploy script
      copy:
        src: "./env/Howinvest-APIGateway/private"
        dest: "Howinvest-APIGateway"
    - name: generation the BOLT-AUTOMATION env
      template:
        src: env/BOLT-AUTOMATION/env.js.j2
        dest: BOLT-AUTOMATION/config/env.js
    - name: generation the HowinvestMockAPI config
      template:
        src: env/Howinvest-APIGateway/private/config.toml.j2
        dest: Howinvest-APIGateway/private/config.toml
    - name: set cap can net bind service
      become: yes
      command: setcap cap_net_bind_service=+ep /usr/bin/node
    - name: start Howinvest-APIGateway
      command: /usr/local/lib/npm/bin/pm2 start . -n Howinvest-APIGateway
      ignore_errors: true
      args:
        chdir: "Howinvest-APIGateway"

- hosts: howinvest_microservice
  name: set microservice env and start service
  vars_files: vars/all.yml
  tasks:
    - name: Install packages based on package.json.
      npm:
        path: "{{ item }}"
      with_items:
        - "HowInvest-AuthModule"
        - "HowInvest-TradeModule"
        - "HowInvest-Blacklist"
    - name: cp env file
      copy:
        src: "./env/HowInvest-AuthModule/private"
        dest: "HowInvest-AuthModule"
    - name: cp env file
      copy:
        src: "./env/HowInvest-TradeModule/private"
        dest: "HowInvest-TradeModule"
    - name: cp env file
      copy:
        src: "./env/HowInvest-Blacklist/private"
        dest: "HowInvest-Blacklist"
    - name: generation the HowInvest-AuthModule config
      template:
        src:  ./env/HowInvest-AuthModule/private/config.toml.j2
        dest: HowInvest-AuthModule/private/config.toml
    - name: generation the HowInvest-TradeModule config
      template:
        src:  ./env/HowInvest-TradeModule/private/config.toml.j2
        dest: HowInvest-TradeModule/private/config.toml
    - name: generation the HowInvest-Blacklist config
      template:
        src:  ./env/HowInvest-Blacklist/private/config.toml.j2
        dest: HowInvest-Blacklist/private/config.toml
    - name: set AuthModule config
      shell: 
        sed -i "s#fundManagementAddress#{{ hostvars['bolt_microservice']['registerFundManagement'].json.profile.address }}#g" HowInvest-AuthModule/private/config.toml;
        sed -i "s#receptionDeskAddress#{{ hostvars['bolt_microservice']['registerReceptionDesk'].json.profile.address }}#g" HowInvest-AuthModule/private/config.toml;
      ignore_errors: true
    - name: start HowInvest-AuthModule
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-AuthModule
      ignore_errors: true
      args:
        chdir: "HowInvest-AuthModule"
    - name: start HowInvest-TradeModule
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-TradeModule
      ignore_errors: true
      args:
        chdir: "HowInvest-TradeModule"
    - name: start HowInvest-Blacklist
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-Blacklist
      ignore_errors: true
      args:
        chdir: "HowInvest-Blacklist"
