---
- hosts: server
  name: start BOLT service
  vars_files: vars/all.yml
  tasks:
    - name: start gringotts
      shell: rm -rf ./chaindata/level ./chaindata/rocksdb ./db; /usr/local/lib/npm/bin/pm2 start server.js -n gringotts
      ignore_errors: true
      args:
        chdir: "gringotts"
    - name: migrate gringotts & start migrate
      shell: NODE_ENV=production ./node_modules/.bin/sequelize db:migrate --config env.js --migrations-path ./storage-manager/migrations --models-path ./storage-manager/models
      ignore_errors: true
      args:
        chdir: "gringotts"
    - name: generation the BOLT-CURRENCY env
      template:
        src: env/BOLT-CURRENCY/env.js.j2
        dest: BOLT-CURRENCY/env.js
    - name: start migrate
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-CURRENCY
      ignore_errors: true
      args:
        chdir: "BOLT-CURRENCY"
    - name: generation the BOLT-KEYCHAIN env
      template:
        src: env/BOLT-KEYCHAIN/env.js.j2
        dest: BOLT-KEYCHAIN/env.js
    - name: start BOLT-KEYCHAIN
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-KEYCHAIN
      ignore_errors: true
      args:
        chdir: "BOLT-KEYCHAIN"
    - name: generation the BOLT-KEYSTONE env
      template:
        src: env/BOLT-KEYSTONE/env.js.j2
        dest: BOLT-KEYSTONE/env.js
    - name: start BOLT-KEYSTONE
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-KEYSTONE
      ignore_errors: true
      args:
        chdir: "BOLT-KEYSTONE"
    - name: generation the BOLT-TRUST env
      template:
        src: env/BOLT-TRUST/env.js.j2
        dest: BOLT-TRUST/env.js
    - name: migrate BOLT-TRUST
      shell: NODE_ENV=development ./node_modules/.bin/sequelize db:migrate --config env.js --migrations-path ./src/database/migrations --models-path ./src/database/models
      ignore_errors: true
      args:
        chdir: "BOLT-TRUST"
    - name: start BOLT-TRUST
      command: /usr/local/lib/npm/bin/pm2 start . -n BOLT-TRUST
      ignore_errors: true
      args:
        chdir: "BOLT-TRUST"

- hosts: server
  name: set microservice env and start service
  vars_files: vars/all.yml
  tasks:
    - name: Install packages based on package.json.
      npm:
        path: "{{ item }}"
      with_items:
        - "Howinvest-APIGateway"
        - "BOLT-AUTOMATION"
    - name: cp env file & deploy script
      copy:
        src: "./env/Howinvest-APIGateway/private"
        dest: "Howinvest-APIGateway"
    - name: generation the BOLT-AUTOMATION env
      template:
        src: env/BOLT-AUTOMATION/env.js.j2
        dest: BOLT-AUTOMATION/config/env.js
    - name: generation the HowinvestMockAPI config
      template:
        src: env/Howinvest-APIGateway/private/config.toml.j2
        dest: Howinvest-APIGateway/private/config.toml
    - name: set cap can net bind service
      become: yes
      command: setcap cap_net_bind_service=+ep /usr/bin/node
    - name: start Howinvest-APIGateway
      command: /usr/local/lib/npm/bin/pm2 start . -n Howinvest-APIGateway
      ignore_errors: true
      args:
        chdir: "Howinvest-APIGateway"

- hosts: server
  name: register all service user
  vars_files: vars/all.yml
  tasks:
    - name: call keystone to register authModule
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "authModule", "password": "{{ authModulePassword }}", "profile": { "name": "authModule", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
    - name: call keystone to register opAccount
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "opAccount", "password": "{{ opAccountPassword }}", "profile": { "name": "opAccount", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
    - name: call keystone to register receptionDesk
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "receptionDesk", "password": "{{ receptionDeskPassword }}", "profile": { "name": "receptionDesk", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: registerReceptionDesk
    - name: call keystone to register fundManagement
      uri:
        url: "http://{{ bolt_microservice_ip }}:5999/register"
        method: POST
        body: {"userID": "fundManagement", "password": "{{ fundManagementPassword }}", "profile": { "name": "fundManagement", "phone": "0987654321" }}
        body_format: json
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: registerFundManagement

- hosts: server
  name: set microservice env and start service
  vars_files: vars/all.yml
  tasks:
    - name: Install packages based on package.json.
      npm:
        path: "{{ item }}"
      with_items:
        - "HowInvest-AuthModule"
        - "HowInvest-TradeModule"
        - "HowInvest-Blacklist"
    - name: cp env file
      copy:
        src: "./env/HowInvest-AuthModule/private"
        dest: "HowInvest-AuthModule"
    - name: cp env file
      copy:
        src: "./env/HowInvest-TradeModule/private"
        dest: "HowInvest-TradeModule"
    - name: cp env file
      copy:
        src: "./env/HowInvest-Blacklist/private"
        dest: "HowInvest-Blacklist"
    - name: generation the HowInvest-AuthModule config
      template:
        src:  ./env/HowInvest-AuthModule/private/config.toml.j2
        dest: HowInvest-AuthModule/private/config.toml
    - name: generation the HowInvest-TradeModule config
      template:
        src:  ./env/HowInvest-TradeModule/private/config.toml.j2
        dest: HowInvest-TradeModule/private/config.toml
    - name: generation the HowInvest-Blacklist config
      template:
        src:  ./env/HowInvest-Blacklist/private/config.toml.j2
        dest: HowInvest-Blacklist/private/config.toml
    - name: set AuthModule config
      shell: 
        sed -i "s#fundManagementAddress#{{ hostvars['server']['registerFundManagement'].json.profile.address }}#g" HowInvest-AuthModule/private/config.toml;
        sed -i "s#receptionDeskAddress#{{ hostvars['server']['registerReceptionDesk'].json.profile.address }}#g" HowInvest-AuthModule/private/config.toml;
      ignore_errors: true
    - name: start HowInvest-AuthModule
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-AuthModule
      ignore_errors: true
      args:
        chdir: "HowInvest-AuthModule"
    - name: start HowInvest-TradeModule
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-TradeModule
      ignore_errors: true
      args:
        chdir: "HowInvest-TradeModule"
    - name: start HowInvest-Blacklist
      command: /usr/local/lib/npm/bin/pm2 start . -n HowInvest-Blacklist
      ignore_errors: true
      args:
        chdir: "HowInvest-Blacklist"
  environment:
    - LC_CTYPE: en_US.UTF-8
    - LC_ALL: en_US.UTF-8
  
- hosts: server
  sudo: yes
  vars_files: vars/all.yml
  tasks:
    - name: Change ~/.ssh, group and permissions
      file:
        path: "/home/{{ agent_user }}/.ssh"
        owner: "{{ agent_user }}"
        group: "{{ agent_user }}"
